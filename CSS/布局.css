

/* ------------------------------- 水平居中布局 ------------------------------- */

/* 方案一 */
/* 优点：兼容性好 */
/* 缺点：text-algin属性具有继承性 */
.box {
	text-align: center;
}
.item {
	display: inline-block;
}

/* 方案二 */
/* 优点：只需对子级元素设置即可实现水平居中效果 */
/* 缺点：如果子集元素脱离文档流，margin属性将失效 */
/* 脱离文档流：float: left|right; position: absolute|fixed */
.item {
	display: block|table;
	margin: 0 auto;
}

/* 方案三 */
/* 优点:无论父级元素是否脱离文档流,都不影响子集元素的水平居中效果 */
/* 缺点:transform为css3属性,浏览器支持性不好 */
.box {
	position: relative;
}
.item {
	position: absolute;
	left: 50%;
	transform: translateX(-50%);
}


/* ------------------------------- 垂直居中布局 ------------------------------- */

/* 方案一 */
/* 优点:浏览器兼容性较好 */
/* 缺点:vertical-algin属性具有继承性 */
.box {
	display: table-cell;
	vertical-align: middle;
}

/* 方案二 */
/* 优点:无论父级元素是否脱离文档流,都不影响子集元素的垂直居中效果 */
/* 缺点:transform为css3属性,浏览器支持性不好 */
.box {
	position: relative;
}
.item {
	position: absolute;
	top: 50%;
	transform: translateY(-50%);
}


/* --------------------------------- 居中布局 --------------------------------- */

/* 方案一 */
.box {
	position: relative;
}
.item {
	position: absolute;
	top: 50%;
	left: 50%;
	transform: translate(-50%, -50%);
}

/* 方案二 */
.box {
	display: table-cell;
	vertical-align: middle;
}
.item {
	display: block;
	margin: 0 auto;
}


/* --------------------------------- 两列布局 --------------------------------- */

/* 方案一 */
/* 优点:实现简单 */
/* 缺点一:margin-left值与width必须保持一致,高耦合 */
/* 缺点二:浮动元素与不浮动元素共存会存在浏览器兼容问题 */
/* 缺点三:自适应子集元素使用了clear属性，该子集元素将会跑偏 */
.item-left {
	width: 200px;
	float: left;	/* float使其脱离文档流 */
}
.item-right {
	margin-left: 200px;
}

/* 方案二 */
/* 缺点一:margin-left值与width必须保持一致,高耦合 */
/* 缺点二:代价增加,复杂度增加 */
.item-left {
	float: left;
	width: 200px;
	position: relative;
}
.item-right {
	float: right;
	width: 100%;
	margin-left: -200px;
}
.item-right-child {}

/* 方案三 */
/* 优点:简单易用 */
/* 缺点:overflow不仅开启了BFC模式,还会隐藏溢出内容 */
.item-left {
	width: 200px;
	float: left;
}
.item-right {
	/* 开启BFC模式 - 当前元素的内部环境与外界完全隔离 */
	overflow: hidden;
}

/* 方案三 */
/* 优点:兼容性好 */
/* 缺点:受table属性制约 */
.box {
	display: table;
	table-layout: fixed;
}
.item-left {
	display: table-cell;
	width: 200px;
}
.item-right {
	display: table-cell;
}

/* 方案四 */
.box {
	display: flex;
}
.item-left {
	width: 200px;
}
.item-right {
	flex-grow: 1;
}
